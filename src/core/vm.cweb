@* ByVM Core | Binary Virtual Machine with Stack Support

This extends the minimal ByVM core to support a stack, enabling PUSH and POP operations.

@c
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define MEMORY_SIZE 256
#define NUM_REGISTERS 4
#define STACK_START 0xF0  /* Stack grows downward from top of memory */

#define LOAD   0x01
#define STORE  0x02
#define ADD    0x03
#define JUMP   0x04
#define HALT   0x05
#define PUSH   0x06
#define POP    0x07

uint8_t memory[MEMORY_SIZE];
uint8_t registers[NUM_REGISTERS];
uint8_t pc = 0;  // Program Counter
uint8_t sp = STACK_START;  // Stack Pointer
uint8_t running = 1;

void load_program(uint8_t *program, size_t size) {
    for (size_t i = 0; i < size && i < MEMORY_SIZE; ++i) {
        memory[i] = program[i];
    }
}

void execute() {
    while (running) {
        uint8_t opcode = memory[pc++];
        switch (opcode) {
            case LOAD: {
                uint8_t reg = memory[pc++];
                uint8_t value = memory[pc++];
                registers[reg] = value;
                break;
            }
            case STORE: {
                uint8_t reg = memory[pc++];
                uint8_t addr = memory[pc++];
                memory[addr] = registers[reg];
                break;
            }
            case ADD: {
                uint8_t reg1 = memory[pc++];
                uint8_t reg2 = memory[pc++];
                uint8_t dest = memory[pc++];
                registers[dest] = registers[reg1] + registers[reg2];
                break;
            }
            case JUMP: {
                uint8_t addr = memory[pc++];
                pc = addr;
                break;
            }
            case PUSH: {
                uint8_t reg = memory[pc++];
                if (sp == 0) {
                    printf("Stack overflow!\n");
                    running = 0;
                    break;
                }
                memory[--sp] = registers[reg];
                break;
            }
            case POP: {
                uint8_t reg = memory[pc++];
                if (sp >= STACK_START) {
                    printf("Stack underflow!\n");
                    running = 0;
                    break;
                }
                registers[reg] = memory[sp++];
                break;
            }
            case HALT:
                running = 0;
                break;
            default:
                printf("Unknown opcode: %02X\n", opcode);
                running = 0;
                break;
        }
    }
}

int main() {
    // Example program: Push 42, Pop into R0, store in memory[0x20]
    uint8_t program[] = {
        LOAD, 0x00, 42,     // LOAD R0, 42
        PUSH, 0x00,         // PUSH R0
        POP, 0x01,          // POP into R1
        STORE, 0x01, 0x20,  // STORE R1 -> memory[0x20]
        HALT
    };

    load_program(program, sizeof(program));
    execute();

    printf("Result stored at memory[0x20]: %d\n", memory[0x20]);
    return 0;
}
