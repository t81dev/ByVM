@* ByVM Core | Binary Virtual Machine

This is the minimal core for ByVM, designed to execute a small set of binary instructions. The VM supports a stack, registers, and memory, with a simple fetch-decode-execute cycle.

@c
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define MEMORY_SIZE 256
#define NUM_REGISTERS 4

// Opcodes
#define LOAD  0x01
#define STORE 0x02
#define ADD   0x03
#define JUMP  0x04
#define HALT  0x05

// VM State
uint8_t memory[MEMORY_SIZE];
uint8_t registers[NUM_REGISTERS];
uint8_t pc = 0;  // Program Counter
uint8_t running = 1;

void load_program(uint8_t *program, size_t size) {
    for (size_t i = 0; i < size && i < MEMORY_SIZE; ++i) {
        memory[i] = program[i];
    }
}

void execute() {
    while (running) {
        uint8_t opcode = memory[pc++];
        switch (opcode) {
            case LOAD: {
                uint8_t reg = memory[pc++];
                uint8_t value = memory[pc++];
                registers[reg] = value;
                break;
            }
            case STORE: {
                uint8_t reg = memory[pc++];
                uint8_t addr = memory[pc++];
                memory[addr] = registers[reg];
                break;
            }
            case ADD: {
                uint8_t reg1 = memory[pc++];
                uint8_t reg2 = memory[pc++];
                uint8_t dest = memory[pc++];
                registers[dest] = registers[reg1] + registers[reg2];
                break;
            }
            case JUMP: {
                uint8_t addr = memory[pc++];
                pc = addr;
                break;
            }
            case HALT:
                running = 0;
                break;
            default:
                printf("Unknown opcode: %02X\n", opcode);
                running = 0;
                break;
        }
    }
}

int main() {
    // Example program: Load 5 + 10 -> Register 0, store result in memory[0x10]
    uint8_t program[] = {
        LOAD, 0x00, 5,       // LOAD R0, 5
        LOAD, 0x01, 10,      // LOAD R1, 10
        ADD, 0x00, 0x01, 0x02, // ADD R0, R1 -> R2
        STORE, 0x02, 0x10,   // STORE R2 -> memory[0x10]
        HALT
    };

    load_program(program, sizeof(program));
    execute();

    printf("Result stored at memory[0x10]: %d\n", memory[0x10]);
    return 0;
}

